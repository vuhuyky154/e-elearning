// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.1
// source: proto/servicegrpc/quantity.proto

package servicegrpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	QuantityService_InitProcessQuantity_FullMethodName = "/app.quantity.QuantityService/InitProcessQuantity"
	QuantityService_SendBlobQuantity_FullMethodName    = "/app.quantity.QuantityService/SendBlobQuantity"
)

// QuantityServiceClient is the client API for QuantityService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QuantityServiceClient interface {
	InitProcessQuantity(ctx context.Context, in *InitProcessQuantityRequest, opts ...grpc.CallOption) (*InitProcessQuantityResponse, error)
	SendBlobQuantity(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[SendBlobQuantityRequest, SendBlobQuantityResponse], error)
}

type quantityServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewQuantityServiceClient(cc grpc.ClientConnInterface) QuantityServiceClient {
	return &quantityServiceClient{cc}
}

func (c *quantityServiceClient) InitProcessQuantity(ctx context.Context, in *InitProcessQuantityRequest, opts ...grpc.CallOption) (*InitProcessQuantityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InitProcessQuantityResponse)
	err := c.cc.Invoke(ctx, QuantityService_InitProcessQuantity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quantityServiceClient) SendBlobQuantity(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[SendBlobQuantityRequest, SendBlobQuantityResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &QuantityService_ServiceDesc.Streams[0], QuantityService_SendBlobQuantity_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SendBlobQuantityRequest, SendBlobQuantityResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type QuantityService_SendBlobQuantityClient = grpc.ClientStreamingClient[SendBlobQuantityRequest, SendBlobQuantityResponse]

// QuantityServiceServer is the server API for QuantityService service.
// All implementations must embed UnimplementedQuantityServiceServer
// for forward compatibility.
type QuantityServiceServer interface {
	InitProcessQuantity(context.Context, *InitProcessQuantityRequest) (*InitProcessQuantityResponse, error)
	SendBlobQuantity(grpc.ClientStreamingServer[SendBlobQuantityRequest, SendBlobQuantityResponse]) error
	mustEmbedUnimplementedQuantityServiceServer()
}

// UnimplementedQuantityServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedQuantityServiceServer struct{}

func (UnimplementedQuantityServiceServer) InitProcessQuantity(context.Context, *InitProcessQuantityRequest) (*InitProcessQuantityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitProcessQuantity not implemented")
}
func (UnimplementedQuantityServiceServer) SendBlobQuantity(grpc.ClientStreamingServer[SendBlobQuantityRequest, SendBlobQuantityResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SendBlobQuantity not implemented")
}
func (UnimplementedQuantityServiceServer) mustEmbedUnimplementedQuantityServiceServer() {}
func (UnimplementedQuantityServiceServer) testEmbeddedByValue()                         {}

// UnsafeQuantityServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QuantityServiceServer will
// result in compilation errors.
type UnsafeQuantityServiceServer interface {
	mustEmbedUnimplementedQuantityServiceServer()
}

func RegisterQuantityServiceServer(s grpc.ServiceRegistrar, srv QuantityServiceServer) {
	// If the following call pancis, it indicates UnimplementedQuantityServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&QuantityService_ServiceDesc, srv)
}

func _QuantityService_InitProcessQuantity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitProcessQuantityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuantityServiceServer).InitProcessQuantity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuantityService_InitProcessQuantity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuantityServiceServer).InitProcessQuantity(ctx, req.(*InitProcessQuantityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuantityService_SendBlobQuantity_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(QuantityServiceServer).SendBlobQuantity(&grpc.GenericServerStream[SendBlobQuantityRequest, SendBlobQuantityResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type QuantityService_SendBlobQuantityServer = grpc.ClientStreamingServer[SendBlobQuantityRequest, SendBlobQuantityResponse]

// QuantityService_ServiceDesc is the grpc.ServiceDesc for QuantityService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QuantityService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "app.quantity.QuantityService",
	HandlerType: (*QuantityServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InitProcessQuantity",
			Handler:    _QuantityService_InitProcessQuantity_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendBlobQuantity",
			Handler:       _QuantityService_SendBlobQuantity_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "proto/servicegrpc/quantity.proto",
}
